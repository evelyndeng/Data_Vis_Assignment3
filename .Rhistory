df_3c$anticipation <- NA
#apply NRC_sentiment function to blurbs and assign output to the sentiment dummy variables
for (i in 4:13) {                     #4:13 are the dummy var cols
for (j in 1:length(df_3c$blurb)) {
df_3c[j, i] <- NRC_sentiment(df_3c$blurb[j])[i-3]
}
}
df_3c$count_sentiments <- NA
for (i in 1:2000) {
df_3c$count_sentiments[i] <- sum(df_3c[i,4:13])
}
df_3c <- df_3c %>%
mutate(trust = case_when(
trust==1 ~ "trust")) %>%
mutate(fear = case_when(
fear==1 ~ "fear")) %>%
mutate(negative = case_when(
negative==1 ~ "negative")) %>%
mutate(sadness = case_when(
sadness==1 ~ "sadness")) %>%
mutate(anger = case_when(
anger==1 ~ "anger")) %>%
mutate(surprise = case_when(
surprise==1 ~ "surprise")) %>%
mutate(positive = case_when(
positive==1 ~ "positive")) %>%
mutate(disgust = case_when(
disgust==1 ~ "disgust")) %>%
mutate(joy = case_when(
joy==1 ~ "joy")) %>%
mutate(anticipation = case_when(
anticipation==1 ~ "anticipation"))
df_3c_test2 <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment") %>%
.[!is.na(.$sentiment) | df_3c$count_sentiments==0, ]
df_3c_test2
df_3c
df_3c_test2 <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment")
df_3c_test2
df_3c_test3 <- df_3c_test2 %>%
.[!is.na(.$sentiment) | df_3c$count_sentiments==0, ]
df_3c_test3
df_3c_test2 <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment")
df_3c_test2
df_3c_test3 <- df_3c_test2 %>%
.[!is.na(.$sentiment) | .$count_sentiments==0, ]
df_3c_test3
count(unique(df_3c_test3$blurb))
length(unique(df_3c_test3$blurb))
length(unique(df_3c$blurb))
length(unique(df_3a$blurb))
length(unique(df_2a$blurb))
df_3c <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment")  %>%
.[!is.na(.$sentiment) | .$count_sentiments==0, ]
df_3c
p <- ggplot(df_3a, aes(sentiment, fill=state))
p + geom_bar(position="fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success", x = "", y = "Proportion of Projects", fill = "") +
theme_economist()
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position="fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success", x = "", y = "Proportion of Projects", fill = "") +
theme_economist()
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", "NA")
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position="fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position="fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
table(df_3c$sentiment)
table(df_3c$state)
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar() + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
#write a function to detect the presence of words that correspond to each sentiment
NRC_sentiment <- function(words=c("really great good stuff bad")){
require(quanteda)
tok <- quanteda::tokens(words)
trust <- sum(tok[[1]]%in%NRC_trust$word)
fear <- sum(tok[[1]]%in%NRC_fear$word)
negative <- sum(tok[[1]]%in%NRC_negative$word)
sadness <- sum(tok[[1]]%in%NRC_sadness$word)
anger <- sum(tok[[1]]%in%NRC_anger$word)
surprise <- sum(tok[[1]]%in%NRC_surprise$word)
positive <- sum(tok[[1]]%in%NRC_positive$word)
disgust <- sum(tok[[1]]%in%NRC_disgust$word)
joy <- sum(tok[[1]]%in%NRC_joy$word)
anticipation <- sum(tok[[1]]%in%NRC_anticipation$word)
return(c(trust, fear, negative, sadness, anger, surprise, positive, disgust, joy, anticipation))
}
#make new df for this problem using the original full data with the 2000 most and least successful projects from df_2a and replacing the original blurbs with the cleaned and stem-completed blurbs from df_3a.
df_3c <- cbind(df_2a[-2], df_3a$blurb) %>%
.[, c(12, 17, 23)]
names(df_3c)[3] <- "blurb"
df_3c$blurb <- as.character(df_3c$blurb)
#add dummy variables for each sentiment
df_3c$trust <- NA
df_3c$fear <- NA
df_3c$negative <- NA
df_3c$sadness <- NA
df_3c$anger <- NA
df_3c$surprise <- NA
df_3c$positive <- NA
df_3c$disgust <- NA
df_3c$joy <- NA
df_3c$anticipation <- NA
#apply NRC_sentiment function to blurbs and assign output to the sentiment dummy variables
for (i in 4:13) {                     #4:13 are the dummy var cols
for (j in 1:length(df_3c$blurb)) {
df_3c[j, i] <- NRC_sentiment(df_3c$blurb[j])[i-3]
}
}
head(NRC_disgust, 20)
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position = "fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position == "fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
#make new df for this problem using the original full data with the 2000 most and least successful projects from df_2a and replacing the original blurbs with the cleaned and stem-completed blurbs from df_3a.
df_3c <- cbind(df_2a[-2], df_3a$blurb) %>%
.[, c(12, 17, 23)]
names(df_3c)[3] <- "blurb"
df_3c$blurb <- as.character(df_3c$blurb)
#add dummy variables for each sentiment
df_3c$trust <- NA
df_3c$fear <- NA
df_3c$negative <- NA
df_3c$sadness <- NA
df_3c$anger <- NA
df_3c$surprise <- NA
df_3c$positive <- NA
df_3c$disgust <- NA
df_3c$joy <- NA
df_3c$anticipation <- NA
#apply NRC_sentiment function to blurbs and assign output to the sentiment dummy variables
for (i in 4:13) {                     #4:13 are the dummy var cols
for (j in 1:length(df_3c$blurb)) {
df_3c[j, i] <- NRC_sentiment(df_3c$blurb[j])[i-3]
}
}
df_3c$count_sentiments <- NA
for (i in 1:2000) {
df_3c$count_sentiments[i] <- sum(df_3c[i,4:13])
}
df_3c <- df_3c %>%
mutate(trust = case_when(
trust==1 ~ "trust")) %>%
mutate(fear = case_when(
fear==1 ~ "fear")) %>%
mutate(negative = case_when(
negative==1 ~ "negative")) %>%
mutate(sadness = case_when(
sadness==1 ~ "sadness")) %>%
mutate(anger = case_when(
anger==1 ~ "anger")) %>%
mutate(surprise = case_when(
surprise==1 ~ "surprise")) %>%
mutate(positive = case_when(
positive==1 ~ "positive")) %>%
mutate(disgust = case_when(
disgust==1 ~ "disgust")) %>%
mutate(joy = case_when(
joy==1 ~ "joy")) %>%
mutate(anticipation = case_when(
anticipation==1 ~ "anticipation"))
df_3c <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment")  %>%
.[!is.na(.$sentiment) | .$count_sentiments==0, ]
df_3c
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position = "fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position = "fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
dim(df_3c)
#get words that correspond to each sentiment
NRC_lex <- get_sentiments("nrc")
NRC_trust <- NRC_lex[NRC_lex$sentiment == "trust",]
NRC_fear <- NRC_lex[NRC_lex$sentiment == "fear",]
NRC_negative <- NRC_lex[NRC_lex$sentiment == "negative",]
NRC_sadness <- NRC_lex[NRC_lex$sentiment == "sadness",]
NRC_anger <- NRC_lex[NRC_lex$sentiment == "anger",]
NRC_surprise <- NRC_lex[NRC_lex$sentiment == "surprise",]
NRC_positive <- NRC_lex[NRC_lex$sentiment == "positive",]
NRC_disgust <- NRC_lex[NRC_lex$sentiment == "disgust",]
NRC_joy <- NRC_lex[NRC_lex$sentiment == "joy",]
NRC_anticipation <- NRC_lex[NRC_lex$sentiment == "anticipation",]
#write a function to detect the presence of words that correspond to each sentiment
NRC_sentiment <- function(words=c("really great good stuff bad")){
require(quanteda)
tok <- quanteda::tokens(words)
trust <- max(tok[[1]]%in%NRC_trust$word)
fear <- max(tok[[1]]%in%NRC_fear$word)
negative <- max(tok[[1]]%in%NRC_negative$word)
sadness <- max(tok[[1]]%in%NRC_sadness$word)
anger <- max(tok[[1]]%in%NRC_anger$word)
surprise <- max(tok[[1]]%in%NRC_surprise$word)
positive <- max(tok[[1]]%in%NRC_positive$word)
disgust <- max(tok[[1]]%in%NRC_disgust$word)
joy <- max(tok[[1]]%in%NRC_joy$word)
anticipation <- max(tok[[1]]%in%NRC_anticipation$word)
return(c(trust, fear, negative, sadness, anger, surprise, positive, disgust, joy, anticipation))
}
#make new df for this problem using the original full data with the 2000 most and least successful projects from df_2a and replacing the original blurbs with the cleaned and stem-completed blurbs from df_3a.
df_3c <- cbind(df_2a[-2], df_3a$blurb) %>%
.[, c(12, 17, 23)]
names(df_3c)[3] <- "blurb"
df_3c$blurb <- as.character(df_3c$blurb)
#add dummy variables for each sentiment
df_3c$trust <- NA
df_3c$fear <- NA
df_3c$negative <- NA
df_3c$sadness <- NA
df_3c$anger <- NA
df_3c$surprise <- NA
df_3c$positive <- NA
df_3c$disgust <- NA
df_3c$joy <- NA
df_3c$anticipation <- NA
#apply NRC_sentiment function to blurbs and assign output to the sentiment dummy variables
for (i in 4:13) {                     #4:13 are the dummy var cols
for (j in 1:length(df_3c$blurb)) {
df_3c[j, i] <- NRC_sentiment(df_3c$blurb[j])[i-3]
}
}
df_3c$count_sentiments <- NA
for (i in 1:2000) {
df_3c$count_sentiments[i] <- sum(df_3c[i,4:13])
}
df_3c <- df_3c %>%
mutate(trust = case_when(
trust==1 ~ "trust")) %>%
mutate(fear = case_when(
fear==1 ~ "fear")) %>%
mutate(negative = case_when(
negative==1 ~ "negative")) %>%
mutate(sadness = case_when(
sadness==1 ~ "sadness")) %>%
mutate(anger = case_when(
anger==1 ~ "anger")) %>%
mutate(surprise = case_when(
surprise==1 ~ "surprise")) %>%
mutate(positive = case_when(
positive==1 ~ "positive")) %>%
mutate(disgust = case_when(
disgust==1 ~ "disgust")) %>%
mutate(joy = case_when(
joy==1 ~ "joy")) %>%
mutate(anticipation = case_when(
anticipation==1 ~ "anticipation"))
df_3c <- df_3c %>%
gather(trust:anticipation, key = "sentiment_remove",
value = "sentiment")  %>%
.[!is.na(.$sentiment) | .$count_sentiments==0, ]
df_3c
positions <- c("sadness", "joy", "anticipation", "surprise",
"disgust", "trust", "anger", "positive",
"fear", "negative", NA)
p <- ggplot(df_3c, aes(sentiment, fill=state))
p + geom_bar(position = "fill") + coord_flip() +
labs(title="Sentiments Correlated with Project Success",
x = "", y = "Proportion of Projects", fill = "") +
scale_x_discrete(limits = positions) +
theme_economist()
head(NRC_lex$negative, 20)
head(NRC_negative, 20)
head(NRC_joy, 20)
head(NRC_disgust, 20)
head(NRC_trust, 20)
head(NRC_anger)
head(NRC_anger,20)
head(df_3c[is.na(df_3c$sentiment), blurb]50)
head(df_3c[is.na(df_3c$sentiment), blurb],50)
head(df_3c[is.na(df_3c$sentiment), 4],50)
head(df_3c[is.na(df_3c$sentiment), 3],50)
"awesome"%in%NRC_positive$word
"energy"%in%NRC_positive$word
"secure"%in%NRC_positive$word
"rich"%in%NRC_positive$word
head(NRC_anger)
head(NRC_fear, 20)
head(NRC_surprise, 20)
df_3c
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p + geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment")
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p + geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment),
position = position_jitter(w=0.07))
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p + geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment),
position = position_jitter(w=0.05))
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.05), alpha = 0.7)
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.05), alpha = 0.3)
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.03), alpha = 0.3)
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.02), alpha = 0.3)
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.01), alpha = 0.3)
p <- ggplot(df_3c, aes(y = count_sentiments, x = log(pledged)))
p +
#geom_point(aes(group=sentiment, color = sentiment, alpha = 0.8)) +
theme(legend.position = "top") +
labs(x="log of pledge amount", y="Degree of Sentiment", color="Sentiment") +
geom_jitter(shape=21, aes(fill=sentiment, color=sentiment),
position = position_jitter(w=0.01), alpha = 0.3) +
geom_smooth()
set.seed(1)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(0.7, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(1)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(0.7, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(1)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(0.7, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(0.7, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(0.01, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(4, 1.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(4, 0.2), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.3), colors = brewer.pal(8, "PuOr")[-c(1:2)])
set.seed(2)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.5), colors = brewer.pal(8, "PuOr")[-c(1:2)])
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2, 0.5), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.3, 0.4), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(3, 0.4), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(3, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.7, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.7, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1228)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.6, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1227)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.6, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1226)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.6, 0.3), title.size = 1, max.words = 100)
#Create comparison cloud
set.seed(1225)
comparison.cloud(blurbs_3b_tdm, colors = c("#dd3030", "#3073dd"),
scale=c(2.6, 0.3), title.size = 1, max.words = 100)
set.seed(6)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.5), colors = brewer.pal(8, "PuOr")[-c(1:2)])
setwd("C:/Users/dfz12/Desktop/Evelyn/Columbia/Academic Class 2019 01 Data Visualization/Assignments/Assignment 3")
#visualize the realtionship between the tone of the blurbs and project success
p <- ggplot(df_3a, aes(tone, fill=state))
p + geom_bar(position="fill", width=0.5) + coord_flip() +
labs(title="Positive Wording Correlated with Project Success", x = "Tone in Project Blurbs", y = "Proportion of Projects", fill = "") +
theme_economist()
#visualize the realtionship between the tone of the blurbs and project success
p <- ggplot(df_3a, aes(tone, fill=state))
p + geom_bar(position="fill", width=0.7) + coord_flip() +
labs(title="Positive Wording Correlated with Project Success", x = "Tone in Project Blurbs", y = "Proportion of Projects", fill = "") +
theme_economist()
library(tidyverse)
library(ggplot2)
library(ggthemes)
df <- read_csv("kickstarter_projects.csv")
#Restructure data to prepare for plotting
df_1a <- df %>%
filter(state == "successful" | state == "failed") %>%
group_by(top_category, state) %>%
summarize(count=n()) %>%
spread(key = state, value = count) %>%
summarize(success_rate=100*successful/(successful+failed)) %>%
arrange(desc(success_rate))
#Plot the relationship between success and category
p1 <- ggplot(df_1a, aes(x=reorder(top_category, success_rate),
y =success_rate), xlim=c(0,100))
plot1 <- p1 + geom_point(size=2) +
scale_y_continuous(limits = c(0, 100), breaks = c(0, 20, 40, 60, 80, 100)) +
coord_flip() + theme_wsj() +
theme(legend.title = element_blank()) +
labs(title = "Project Success Rate by Category",
x = "", y = "Success Rate (%)")
plot1
#Make a word cloud with the most frequent words in successful blurbs
set.seed(6)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.5), colors = brewer.pal(8, "PuOr")[-c(1:2)])
#Make a word cloud with the most frequent words in successful blurbs
set.seed(6)
library(wordcloud)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.5), colors = brewer.pal(8, "PuOr")[-c(1:2)])
#Make a word cloud with the most frequent words in successful blurbs
set.seed(6)
library(wordcloud)
library(RColorBrewer)
wordcloud(successful_words$words, successful_words$frequency,
max.words = 100, scale=c(3, 0.5), colors = brewer.pal(8, "PuOr")[-c(1:2)])
